shuffer = [0x00000009, 0x00000012, 0x0000000F, 0x00000003, 0x00000004, 0x00000017, 0x00000006, 0x00000007, 0x00000008, 0x00000016, 0x0000000A, 0x0000000B, 0x00000021, 0x0000000D, 0x0000000E, 0x0000001B, 0x00000010, 0x00000025, 0x00000011, 0x00000013, 0x00000014, 0x00000015, 0x00000005, 0x00000022, 0x00000018, 0x00000019, 0x0000001A, 0x00000002, 0x0000000C, 0x0000001D, 0x0000001E, 0x0000001F, 0x00000020, 0x0000001C, 0x00000000, 0x00000023, 0x00000024, 0x00000001]

option = [0x00000006, 0x00000001, 0x00000007, 0x00000001, 0x00000003, 0x00000002, 0x00000004, 0x00000003, 0x00000006, 0x00000003, 0x00000007, 0x00000006, 0x00000001, 0x00000004, 0x00000007, 0x00000004, 0x00000001, 0x00000005, 0x00000007, 0x00000006, 0x00000007, 0x00000005, 0x00000006, 0x00000004, 0x00000005, 0x00000001, 0x00000007, 0x00000005, 0x00000002, 0x00000003, 0x00000001, 0x00000002, 0x00000003, 0x00000002, 0x00000001, 0x00000006, 0x00000002, 0x00000004]


thamsothu3 = [0x00000001, 0x00000003, 0x00000001, 0x00000001, 0x00000002, 0x00000001, 0x00000003, 0x00000001, 0x00000002, 0x00000002, 0x00000004, 0x00000004, 0x00000001, 0x00000003, 0x00000004, 0x00000004, 0x00000004, 0x00000001, 0x00000002, 0x00000001, 0x00000004, 0x00000001, 0x00000004, 0x00000003, 0x00000001, 0x00000002, 0x00000004, 0x00000004, 0x00000002, 0x00000002, 0x00000001, 0x00000003, 0x00000004, 0x00000002, 0x00000001, 0x00000002, 0x00000002, 0x00000003]


enc = [0, 0x0E, 0xEB, 0xF3, 0xF6, 0xD1, 0x6B, 0xA7, 0x8F, 0x3D, 0x91, 0x85, 0x2B, 0x86, 0xA7, 0x6B, 0xDB, 0x7B, 0x6E, 0x89, 0x89, 0x18, 0x95, 0x67, 0xCA, 0x5F, 0xE2, 0x54, 0x0E, 0xD3, 0x3E, 0x20, 0x5A, 0x7E, 0xD4, 0xB8, 0x10, 0xC2, 0xB7, 0, 0]

fuck_arr = [0x36, 0xEC, 0x00, 0x00, 0x36, 0xED, 0x00, 0x00, 0x36, 0xBB, 0x00, 0x00, 0x36, 0x8C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00, 0xEC, 0xEF, 0x8F, 0x00, 0x19, 0xEE, 0xE1, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]


def assign_arr(a, i, type1):
    j = 0
    while a != 0 and j < type1:
        fuck_arr[i] = a & 0xFF
        a = a >> 8
        i += 1 
        j += 1

def convert(arr):
    type1 = len(arr) 
    arr1 = arr[::-1]
    str1 = ''.join(format(x, '02x') for x in arr[0:type1])
    b = bytearray.fromhex(str1)
    return int.from_bytes(b, 'little')


def fuck_funciton(a1, a2, a3):
    v4 = a3 - 1
    v18 = 171
    v6 = 0 

    b1 = 4 * v4 + 16 
    b2 = 4 * v4 
    
    for i in range(v18):
        if v4 <= 5:
            if convert(a2[b1:b1+4]):             
                v8 = convert(a2[b1:b1+2]) 
            else:
                v8 = convert(a2[b2:b2+2]) 
            v7 = ((((32 * v8) ^ (v8 ^ (4 * (v8 ^ (2 * v8)))) & 0xFFE0) << 10) & 0xFFFF) | (v8 >> 1)
            assign_arr(v7, b1, 4)
        else:
            v7 = 0

        v9 = v7 & 0x7FF
        v10 = v7 & 7
        v11 = v9 >> 3
        b3 =  v11 + 44
        if a1:
            v12 = convert(a2[b3:b3+1])
        else:
            v12 = ~convert(a2[b3:b3+1])
        b4 = v12 ^ (1 << v10)
        fuck_arr[b3] = b4 & 0xFF

    
    
    v14 = 46
    v15 = 64
    for i in range(v15):
        v16 = a2[v14-2]
        v14 += 4 
        v6 ^= a2[v14 - 4] ^ a2[v14 - 3] ^ a2[v14 - 5] ^ v16
    return v6 & 0xFF



for i in range(len(option)):
    if option[i] == 1 or option[i] == 4 or option[i] == 5:
        x = fuck_funciton(0, fuck_arr, thamsothu3[i])
    else:
        x = fuck_funciton(1, fuck_arr, thamsothu3[i])
    

    print(chr(x ^ enc[i+1]),end=' ')




